{"remainingRequest":"C:\\Users\\User\\vuejsprojects\\App\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\vuejsprojects\\App\\app\\src\\views\\backend\\Dashboards\\Dashboard.vue?vue&type=template&id=59690319&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\vuejsprojects\\App\\app\\src\\views\\backend\\Dashboards\\Dashboard.vue","mtime":1627732769921},{"path":"C:\\Users\\User\\vuejsprojects\\App\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\vuejsprojects\\App\\app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\vuejsprojects\\App\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\vuejsprojects\\App\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}